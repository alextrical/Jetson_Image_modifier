name: Build Jetson Orin Nano Disk Image

on:
  release:
    types: [published]
  push:
    branches: [ main, master, selfhosted ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  fetch-file:
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    steps:
    - name: Disable man-db to make package install and removal faster
      run: |
        echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
        sudo dpkg-reconfigure man-db

    # - name: Free Disk Space
    #   # uses: jlumbroso/free-disk-space@main
    #   uses: jayllyz/free-disk-space@perf/use-rmz
    #   with:
    #     tool-cache: true
    #     android: true
    #     dotnet: true
    #     haskell: true
    #     large-packages: true
    #     docker-images: false
    #     swap-storage: true

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies on host
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qemu-user-static \
          binfmt-support

    - name: Set up QEMU for ARM64 emulation
      run: |
        sudo update-binfmts --enable qemu-aarch64
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
    - name: Download release asset from latest release
      uses: robinraju/release-downloader@v1
      with:
        repository: 'alextrical/Jetson_Image_builder'  # replace with target repo owner/name
        latest: true              # ensures file is downloaded from latest release
        fileName: 'jetson-orin-nano-devkit-super_*.img.gz'  # wildcard pattern for file
        out-file-path: '.'        # directory to place the downloaded file
        token: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for access

    - name: Extract image file
      run: |
        FILE=$(ls *.img.gz 2>/dev/null | head -n 1 | sed 's/\.gz$//')
        echo "IMAGE_NAME=$FILE" >> $GITHUB_ENV
        gzip -d $FILE.gz

    # - name: List files in current directory
    #   run: |
    #     echo "Listing files in $(pwd):"
    #     ls -alh

    - name: Expand the disk image file by 10GB
      run: |
        truncate -s +10G $IMAGE_NAME

    - name: Setup a loop device, expand the partition and mount it
      run: |
        LOOPDEV=$(sudo losetup -Pf --show $IMAGE_NAME)
        echo "LOOPDEV=${LOOPDEV}" >> $GITHUB_ENV
        echo "LOOPDEV is set to: $LOOPDEV"

        PARTITION=$LOOPDEV"p1"
        #expand partition 1
        sudo growpart "$LOOPDEV" 1
        #Inform the kernel of partition table changes:
        sudo partprobe "$LOOPDEV"
        #resize partition
        sudo e2fsck -fy "$PARTITION"
        sudo resize2fs "$PARTITION"

        MNTPOINT=/mnt/APP
        echo "MNTPOINT=${MNTPOINT}" >> $GITHUB_ENV
        sudo mkdir -p "$MNTPOINT"
        sudo mount "$PARTITION" "$MNTPOINT"

        #tmp doesn't exist yet, so lets make it
        sudo mkdir /mnt/APP/tmp
        sudo chmod 1777 /mnt/APP/tmp

        df -h /mnt/APP

    - name: Stop host docker
      run: |
        sudo systemctl stop docker
        sudo systemctl stop docker.socket
        sudo systemctl stop containerd

    - name: Create Docker daemon.json
      run: |
        echo '{
          "data-root": "/mnt/APP/var/lib/docker"
        }' | sudo tee /etc/docker/daemon.json > /dev/null

    - name: Start host docker
      run: |
        sudo systemctl daemon-reload
        sudo systemctl start docker

    - name: Stat docker data root
      run: |
        df -h /mnt/APP/var/lib/docker

    - name: Pull an docker image
      run: |
        docker pull ghcr.io/music-assistant/server:latest
        docker images -a
        
    - name: Stop host docker
      run: |
        sudo systemctl stop docker
        sudo systemctl stop docker.socket
        sudo systemctl stop containerd

    - name: Stat docker data root
      run: |
        df -h /mnt/APP/var/lib/docker
      

    # - name: Add custom packages to rootfs
    #   run: |
    #     # Install additional packages in rootfs using chroot
    #     echo "Setting up chroot environment..."
    #     sudo cp /usr/bin/qemu-aarch64-static /mnt/APP/usr/bin/

    #     # Create any mount points that dont exist
    #     sudo touch /mnt/APP/run/docker.sock

    #     # Mount necessary filesystems for chroot
    #     sudo mount --bind /dev /mnt/APP/dev/
    #     sudo mount --bind /sys /mnt/APP/sys/
    #     sudo mount --bind /proc /mnt/APP/proc/
    #     sudo mount --bind /dev/pts /mnt/APP/dev/pts/
    #     sudo mount --bind /var/run/docker.sock /mnt/APP/run/docker.sock

    #     # Copy resolv.conf for network access in chroot
    #     sudo cp /etc/resolv.conf /mnt/APP/etc/resolv.conf.bak
    #     sudo cp /etc/resolv.conf /mnt/APP/etc/resolv.conf

    #     # Copy script to install packages in chroot
    #     echo "Copying test.sh file from scripts..."
    #     cp ${{ github.workspace }}/scripts/test.sh test.sh
    
    #     # Make script executable and run it in chroot
    #     chmod +x test.sh
    #     sudo cp test.sh /mnt/APP/tmp/
    #     # sudo chroot /mnt/APP /bin/bash -c "ls -l"
    #     # sudo chroot /mnt/APP /bin/bash -c "ls -l /var/run"
    #     # sudo chroot /mnt/APP /bin/bash -c "ls -l /run"
    #     sudo chroot /mnt/APP /tmp/test.sh

    #     # Clean up chroot
    #     sudo rm -f /mnt/APP/tmp/test.sh
    #     sudo rm -f /mnt/APP/etc/resolv.conf
    #     sudo mv /mnt/APP/etc/resolv.conf.bak /mnt/APP/etc/resolv.conf

    #     # Unmount filesystems
    #     sudo umount /mnt/APP/dev/pts/ || true
    #     sudo umount /mnt/APP/dev/ || true
    #     sudo umount /mnt/APP/sys/ || true
    #     sudo umount /mnt/APP/proc/ || true
    #     sudo umount /mnt/APP/proc/ || true
    #     sudo umount /mnt/APP/run/docker.sock || true


    - name: unmount and detach the loop device when done
      run: |
        sudo umount "$MNTPOINT"
        sudo losetup -d "$LOOPDEV"

    - name: Compress image for faster upload
      run: |
        cd $GITHUB_WORKSPACE
        echo "Compressing image for upload..."
        pigz "$IMAGE_NAME"
        ls -lht "$IMAGE_NAME.gz"

    - name: List files in current directory
      run: |
        echo "Listing files in $(pwd):"
        ls -alh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jetson-orin-nano-image-${{ github.run_number }}
        path: |
          $IMAGE_NAME.gz
          $IMAGE_NAME.sha256
          # $IMAGE_NAME.info
        retention-days: 30

    - name: Create release on tag
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
      with:
        files: |
          $IMAGE_NAME.gz
          $IMAGE_NAME.sha256
          # $IMAGE_NAME.info
        body: |
          ## Jetson ${{ env.IMAGE_TYPE }} Image

          This release contains a custom ${{ env.IMAGE_TYPE }} image for the NVIDIA ${{ env.JETSON_TYPE }}.

          ### What's Included
          - L4T Version: ${{ env.L4T_MAJOR_VERSION }}.${{ env.L4T_MINOR_VERSION }}
          - Ubuntu 22.04 LTS ARM64
          - Custom development packages
          - Docker pre-installed
          - Default user: ${{ env.OEM_USER }}/jetson

          ### Installation
          1. Download the `.img.gz` file
          2. Extract using: `xz -d filename.img.gz`
          3. Flash to ${{ env.IMAGE_TYPE }} using Raspberry Pi Imager or dd
          4. insert memory into your Jetson
          5. Boot your ${{ env.JETSON_TYPE }}

          ### Files
          - `*.img.gz` - Compressed ${{ env.IMAGE_TYPE }} image
          - `*.sha256` - Checksum for verification
          - `*.info` - Build and usage information

        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}